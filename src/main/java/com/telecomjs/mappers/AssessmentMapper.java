package com.telecomjs.mappers;

import com.telecomjs.beans.Assessment;
import com.telecomjs.beans.AssessmentWithDetail;
import org.apache.ibatis.annotations.Param;

import java.util.List;

public interface AssessmentMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ASSESSMENT
     *
     * @mbggenerated
     */
    int deleteByPrimaryKey(Integer assessmentId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ASSESSMENT
     *
     * @mbggenerated
     */
    int insert(Assessment record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ASSESSMENT
     *
     * @mbggenerated
     */
    int insertSelective(Assessment record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ASSESSMENT
     *
     * @mbggenerated
     */
    Assessment selectByPrimaryKey(Integer assessmentId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ASSESSMENT
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(Assessment record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ASSESSMENT
     *
     * @mbggenerated
     */
    int updateByPrimaryKey(Assessment record);

    int getPrimaryKey();

    int insertTemp(Assessment assessment);

    int updateTempOpenByEvent(int eventId);

    int insertBySelectEvent(int eventId);

    //删除assessment_temp相关的事件
    int deleteTempByEvent(int eventId);

    int reportEvent(@Param("eventId") int eventId);

    int feedbackAssessment(@Param("assessmentId") int assessmentId);

    List<Assessment> findAssessmentByStaff(@Param("staffId") long staffId);
    List<Assessment> findAssessmentByZone(@Param("zoneId") long zoneId);

    int existsAssessmentForDistrict(@Param("districtId") Long districtId, @Param("assessmentId") int assessmentId);

    int auditAssessmentWithAgree(@Param("assessmentId") int assessmentId);

    int auditAssessmentWithDisagree(@Param("assessmentId") int assessmentId);

    List<Assessment> findAll();

    //关闭事件，删除相关记录
    int deleteEvent(@Param("eventId") int eventId);

    //管理员视图，查找分区域报表
    List<Assessment> findAreaAssessments();
    //管理员视图，查找分局报表
    List<Assessment> findDistrictAssessments();

    //管理员视图，查找片区报表
    List<Assessment> findZoneAssessments();
    //管理员视图，按账期查询全量的到员工层级的数据清单
    List<AssessmentWithDetail> findStaffAssessment(@Param("billingCycle") int billingCycle);
    int findStaffAssessmentCount(@Param("billingCycle") int billingCycle);

    //CEO和区域视图
    List<AssessmentWithDetail> findStaffAssessmentByDistrict(@Param("billingCycle") int billingCycle, @Param("districtId") long zoneId);
    List<AssessmentWithDetail> findStaffAssessmentByArea(@Param("billingCycle") int billingCycle, @Param("areaId") long areaId);
    List<Assessment> findAssessmentForDistrictAndState(@Param("districtId") long districtId, @Param("state") String state);
    List<Assessment> findAssessmentForDistrictAndCycle(@Param("districtId") long districtId, @Param("billingCycle") int billingCycle);
    List<Assessment> findAssessmentForAreaAndCycle(@Param("areaId") long areaId, @Param("billingCycle") int billingCycle);

    int existsZoneAssessment(@Param("zone") long zone, @Param("assessmentId") Integer assessmentId);

    int existsStaffAssessment(@Param("cssStaffId") Long cssStaffId, @Param("assessmentId") Integer assessmentId);

}